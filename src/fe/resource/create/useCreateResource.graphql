#mutation createEconomicEventAndNewResource(
#  $note: String,
#  $atLocation: ID,
#  $action: ID!,
#  $provider: ID!,
#  $receiver: ID!,
#  $hasUnit: ID!,
#  $hasNumericalValue: Float!,
#  $name: String,
#  $image: URI,
#) {
#  createEconomicEvent( event: {
#    action: $action
#    atLocation: $atLocation,
#    provider: $provider,
#    receiver: $receiver,
#    resourceQuantity: {hasUnit: $hasUnit, hasNumericalValue: $hasNumericalValue}
#  },
#    newInventoriedResource: {
#      note: $note,
#      name: $name,
#      image: $image,
#      currentLocation: $atLocation,
#    }) {
#    economicEvent {
#      id
#      note
#      receiver {
#        id
#        name
#        note
#      }
#      provider {
#        id
#        name
#        note
#      }
#      resourceQuantity {
#        hasNumericalValue
#        hasUnit {
#          label
#          symbol
#        }
#      }
#      resourceInventoriedAs { # the newly created resource
#        id
#        name
#        image
#        onhandQuantity {
#          hasNumericalValue
#          hasUnit {
#            label
#            symbol
#          }
#        }
#        accountingQuantity {
#          hasNumericalValue
#          hasUnit {
#            label
#            symbol
#          }
#        }
#      }
#    }
#  }
#}

mutation createEconomicEventAndNewResource(
  $note: String,
  $atLocation: ID,
  $action: ID!,
  $provider: ID!,
  $receiver: ID!,
  $hasUnit: ID!,
  $hasNumericalValue: Float!,
  $name: String,
  $image: URI,
) {
  createEconomicEvent( event: {
    action: $action
    atLocation: $atLocation,
    provider: $provider,
    receiver: $receiver,
    resourceQuantity: {hasUnit: $hasUnit, hasNumericalValue: $hasNumericalValue}
  },
    newInventoriedResource: {
      note: $note,
      name: $name,
      image: $image,
      currentLocation: $atLocation,
    }) {
    economicEvent {
      id
    }
  }
}

mutation createEconomicEventAndExistResource(
  $id: ID!,
  $action: ID!,
  $provider: ID!,
  $receiver: ID!,
  $hasUnit: ID!,
  $hasNumericalValue: Float!,
  $eventNote: String,
) {
  createEconomicEvent (
    event: {
      resourceInventoriedAs: $id,
      note: $eventNote,
      action: $action,
      provider: $provider,
      receiver: $receiver,
      resourceQuantity: {
        hasUnit: $hasUnit,
        hasNumericalValue: $hasNumericalValue
      }
    },
  ) {
    economicEvent {
      id,
    },
    economicResource {
      id
    }
  }
}
